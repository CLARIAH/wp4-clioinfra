StartYear <- min(as.numeric(names(temp3[jjj,which(
!is.na(temp3[jjj,]))])[2:length(temp3[jjj,which(!is.na(temp3[jjj,]))])]),na.rm = T)
EndYear <- max(as.numeric(names(temp3[,which(
!is.na(temp3[jjj,]))])[2:length(temp3[,which(!is.na(temp3[jjj,]))])]),na.rm = T)
if (EndYear >= as.numeric(Period4End)-YearOffset & StartYear <= as.numeric(Period4Start)+YearOffset){
SelPeriodIndic <- rbind(SelPeriodIndic,temp3[jjj,])
}
}
#remove all the non-period years, and non-indicator name columns
#SelPeriodIndic[,which(!(names(SelPeriodIndic) %in% ColsToKeep))] <- NULL
AvailIndicForPeriod <- nrow(SelPeriodIndic)
if (nrow(SelPeriodIndic) > 0) {
SelPeriodIndic$Growth <- as.numeric(NA)
IndicatorsInSelPeriodIndic <- unique(SelPeriodIndic$Indicator)
IndicatorsInSelPeriodIndic <- IndicatorsInSelPeriodIndic[!IndicatorsInSelPeriodIndic %in% ExclFromPerfMatrix]
SelPeriodIndic <- subset(SelPeriodIndic,!(SelPeriodIndic$Indicator %in% ExclFromPerfMatrix))
#for the rankings:
RankingIndic <- ClioOnlyWithData
RankingIndic <- RankingIndic[RankingIndic$`end year`=="2012",]
ColsToKeep <- c(ColsToKeep,"country name")
RankingIndic[,which(!(names(RankingIndic) %in% ColsToKeep))] <- NULL
RankingIndic <- RankingIndic[which(RankingIndic$Indicator %in% IndicatorsInSelPeriodIndic),]
RankingIndic$Rank <- as.numeric((NA))
RankingIndic <- RankingIndic[rowSums(is.na(RankingIndic[,2:ncol(RankingIndic)]))<ncol(RankingIndic)-2,]
# now I need to rank all the variables according to their period's average
RankingIndic$Avg <- rowMeans(RankingIndic[3:(ncol(RankingIndic)-2)],na.rm = T)
for (L_kkk in IndicatorsInSelPeriodIndic){
RankingIndic$Rank[which(RankingIndic$Indicator==L_kkk)] <- match(RankingIndic$Avg[which(RankingIndic$Indicator==L_kkk)],
sort(RankingIndic$Avg[which(RankingIndic$Indicator==L_kkk)],
decreasing = ifelse(IndicPriorityList$Benign[which(IndicPriorityList$IndicatorsList==L_kkk)]==1,T,F)))
}
}
if ( nrow(SelPeriodIndic) >= MinNumOfDescrIndicators) {
# first get the earliest and last year for each variable and estimate its growth
for (L_jij in 1:nrow(SelPeriodIndic)){
L_sds <- SelPeriodIndic[L_jij,2:(ncol(SelPeriodIndic)-1)]
L_sds[,which(is.na(L_sds[1,]))] <- NULL
SelPeriodIndic$Growth[L_jij] <- ifelse(L_sds[1,ncol(L_sds)]==L_sds[1,1],0,100*(L_sds[1,ncol(L_sds)]-L_sds[1,1])/L_sds[1,1])[[1]][1]
SelPeriodIndic$Growth[L_jij] <- ifelse(IndicPriorityList$Benign[which(IndicPriorityList$IndicatorsList==SelPeriodIndic$Indicator[L_jij])]==0,-SelPeriodIndic$Growth[L_jij],SelPeriodIndic$Growth[L_jij])
}
# there are some variables with infinity (coming from the polity circle), I would group those
XxZzYyPeriod4BestFigureXxZzYy <- ifelse(length(which(SelPeriodIndic$Growth==Inf))>0,"Infinite",abs(round(max(SelPeriodIndic$Growth),2))) # just get the number here (in its absolute)
XxZzYyPeriod4BestCharacterizationXxZzYy <- ifelse(length(which(SelPeriodIndic$Growth==Inf))>0,"Progressed",ifelse(round(max(SelPeriodIndic$Growth))>0,"Progressed",ifelse(XxZzYyPeriod4BestFigureXxZzYy==0,"Stagnated","Regressed"))) # Progressed/Stagnated/Regressed
XxZzYyPeriod4BestXxZzYy <- ifelse(length(which(SelPeriodIndic$Growth==Inf))>0,
paste(IndicPriorityList$ShortName[which(IndicPriorityList$IndicatorsList %in% SelPeriodIndic$Indicator[which(SelPeriodIndic$Growth==Inf)])],
collapse = paste("</span><br><span class=\"badge\" data-toggle=\"tooltip\" title=\"",XxZzYyPeriod4BestCharacterizationXxZzYy," ",XxZzYyPeriod4BestFigureXxZzYy,"%\">",sep="")),
IndicPriorityList$ShortName[which(IndicPriorityList$IndicatorsList==SelPeriodIndic$Indicator[which.max(SelPeriodIndic$Growth)])]) # the name of the indicator
XxZzYyPeriod4WorstFigureXxZzYy <- ifelse(length(which(SelPeriodIndic$Growth==-Inf))>0,"Minus Infinity",abs(round(min(SelPeriodIndic$Growth),2))) # just get the number here (in its absolute)
XxZzYyPeriod4WorstCharacterizationXxZzYy <- ifelse(length(which(SelPeriodIndic$Growth==-Inf))>0,"Collapsed",ifelse(round(min(SelPeriodIndic$Growth),2)>0,"Progressed",ifelse(XxZzYyPeriod4WorstFigureXxZzYy==0,"Stagnated","Regressed"))) # Progressed/Stagnated/Regressed
XxZzYyPeriod4WorstXxZzYy <- ifelse(length(which(SelPeriodIndic$Growth==-Inf))>0,
paste(IndicPriorityList$ShortName[which(IndicPriorityList$IndicatorsList %in% SelPeriodIndic$Indicator[which(SelPeriodIndic$Growth==-Inf)])],
collapse = paste("</span><br><span class=\"badge\" data-toggle=\"tooltip\" title=\"",
XxZzYyPeriod4WorstCharacterizationXxZzYy," ",XxZzYyPeriod4WorstFigureXxZzYy,"%\">")),
IndicPriorityList$ShortName[which(IndicPriorityList$IndicatorsList==SelPeriodIndic$Indicator[which.min(SelPeriodIndic$Growth)])]) # the name of the indicator
} else {
XxZzYyPeriod4BestCharacterizationXxZzYy <- paste("Only ", AvailIndicForPeriod,
" available indicators with enough observations in this period",sep = "") # Progressed/Stagnated/Regressed
XxZzYyPeriod4BestFigureXxZzYy <- "N/A" # just get the number here (in its absolute)
XxZzYyPeriod4BestXxZzYy <- "N/A" # the name of the indicator
XxZzYyPeriod4WorstCharacterizationXxZzYy <- paste("Only ", AvailIndicForPeriod,
" available indicators with enough observations in this period",sep = "")
XxZzYyPeriod4WorstFigureXxZzYy <- "N/A"
XxZzYyPeriod4WorstXxZzYy <- "N/A"
if (AvailIndicForPeriod == 0){
XxZzYyPeriod4BestCharacterizationXxZzYy <- paste("No available indicators with enough observations in this period",sep = "") # Progressed/Stagnated/Regressed
XxZzYyPeriod4WorstCharacterizationXxZzYy <- paste("No available indicators with enough observations in this period",sep = "")
}
}
if ( nrow(SelPeriodIndic) >= 2) {
XxZzYyPeriod4BestRankFigureXxZzYy <- min(RankingIndic$Rank[which(RankingIndic$`country name`==CountryList[i])])
XxZzYyPeriod4BestRankXxZzYy <- paste(IndicPriorityList$ShortName[which(IndicPriorityList$IndicatorsList %in% RankingIndic$Indicator[which(RankingIndic$`country name`==CountryList[i] & RankingIndic$Rank==XxZzYyPeriod4BestRankFigureXxZzYy)])],
collapse = "</span><br><span class=\"badge\" data-toggle=\"tooltip\" title=\"Equally ranked to previous indicator\">")
XxZzYyPeriod4TotalBestRankedXxZzYy <- max(RankingIndic$Rank[which(RankingIndic$Indicator==
RankingIndic$Indicator[which(RankingIndic$`country name`==CountryList[i] & RankingIndic$Rank==XxZzYyPeriod4BestRankFigureXxZzYy)][1])],na.rm = T)
XxZzYyPeriod4WorstRankFigureXxZzYy <- max(RankingIndic$Rank[which(RankingIndic$`country name`==CountryList[i])])
XxZzYyPeriod4WorstRankXxZzYy <- paste(IndicPriorityList$ShortName[which(IndicPriorityList$IndicatorsList %in% RankingIndic$Indicator[which(RankingIndic$`country name`==CountryList[i] & RankingIndic$Rank==XxZzYyPeriod4WorstRankFigureXxZzYy)])],
collapse = "</span><br><span class=\"badge\" data-toggle=\"tooltip\" title=\"Equally ranked to previous indicator\">")
XxZzYyPeriod4TotalWorstRankedXxZzYy <- max(RankingIndic$Rank[which(RankingIndic$Indicator==
RankingIndic$Indicator[which(RankingIndic$`country name`==CountryList[i] & RankingIndic$Rank==XxZzYyPeriod4WorstRankFigureXxZzYy)][1])],na.rm = T)
} else {
XxZzYyPeriod4BestRankFigureXxZzYy <- "N/A"
XxZzYyPeriod4TotalBestRankedXxZzYy <- "N/A"
XxZzYyPeriod4BestRankXxZzYy <- "N/A"
XxZzYyPeriod4WorstRankFigureXxZzYy <- "N/A"
XxZzYyPeriod4TotalWorstRankedXxZzYy <- "N/A"
XxZzYyPeriod4WorstRankXxZzYy <- "N/A"
}
temp3 <- temp2
ColsToKeep <- c("Indicator",seq(as.numeric(Period5Start),as.numeric(Period5End),1))
temp3[,which(!(names(temp3) %in% ColsToKeep))] <- NULL
temp3 <- temp3[rowSums(is.na(temp3[,2:ncol(temp3)]))<ncol(temp3)-2,]
SelPeriodIndic <- subset(temp3,temp3$Indicator=="sadjkhksdf8228282827y^^@&^@")
for (jjj in 1:nrow(temp3)){
StartYear <- min(as.numeric(names(temp3[jjj,which(
!is.na(temp3[jjj,]))])[2:length(temp3[jjj,which(!is.na(temp3[jjj,]))])]),na.rm = T)
EndYear <- max(as.numeric(names(temp3[,which(
!is.na(temp3[jjj,]))])[2:length(temp3[,which(!is.na(temp3[jjj,]))])]),na.rm = T)
if (EndYear >= as.numeric(Period5End)-YearOffset & StartYear <= as.numeric(Period5Start)+YearOffset){
SelPeriodIndic <- rbind(SelPeriodIndic,temp3[jjj,])
}
}
#remove all the non-period years, and non-indicator name columns
#SelPeriodIndic[,which(!(names(SelPeriodIndic) %in% ColsToKeep))] <- NULL
AvailIndicForPeriod <- nrow(SelPeriodIndic)
if (nrow(SelPeriodIndic) > 0) {
SelPeriodIndic$Growth <- as.numeric(NA)
IndicatorsInSelPeriodIndic <- unique(SelPeriodIndic$Indicator)
IndicatorsInSelPeriodIndic <- IndicatorsInSelPeriodIndic[!IndicatorsInSelPeriodIndic %in% ExclFromPerfMatrix]
SelPeriodIndic <- subset(SelPeriodIndic,!(SelPeriodIndic$Indicator %in% ExclFromPerfMatrix))
#for the rankings:
RankingIndic <- ClioOnlyWithData
RankingIndic <- RankingIndic[RankingIndic$`end year`=="2012",]
ColsToKeep <- c(ColsToKeep,"country name")
RankingIndic[,which(!(names(RankingIndic) %in% ColsToKeep))] <- NULL
RankingIndic <- RankingIndic[which(RankingIndic$Indicator %in% IndicatorsInSelPeriodIndic),]
RankingIndic$Rank <- as.numeric((NA))
RankingIndic <- RankingIndic[rowSums(is.na(RankingIndic[,2:ncol(RankingIndic)]))<ncol(RankingIndic)-2,]
# now I need to rank all the variables according to their period's average
RankingIndic$Avg <- rowMeans(RankingIndic[3:(ncol(RankingIndic)-2)],na.rm = T)
for (L_kkk in IndicatorsInSelPeriodIndic){
RankingIndic$Rank[which(RankingIndic$Indicator==L_kkk)] <- match(RankingIndic$Avg[which(RankingIndic$Indicator==L_kkk)],
sort(RankingIndic$Avg[which(RankingIndic$Indicator==L_kkk)],
decreasing = ifelse(IndicPriorityList$Benign[which(IndicPriorityList$IndicatorsList==L_kkk)]==1,T,F)))
}
}
if ( nrow(SelPeriodIndic) >= MinNumOfDescrIndicators) {
# first get the earliest and last year for each variable and estimate its growth
for (L_jij in 1:nrow(SelPeriodIndic)){
L_sds <- SelPeriodIndic[L_jij,2:(ncol(SelPeriodIndic)-1)]
L_sds[,which(is.na(L_sds[1,]))] <- NULL
SelPeriodIndic$Growth[L_jij] <- ifelse(L_sds[1,ncol(L_sds)]==L_sds[1,1],0,100*(L_sds[1,ncol(L_sds)]-L_sds[1,1])/L_sds[1,1])[[1]][1]
SelPeriodIndic$Growth[L_jij] <- ifelse(IndicPriorityList$Benign[which(IndicPriorityList$IndicatorsList==SelPeriodIndic$Indicator[L_jij])]==0,-SelPeriodIndic$Growth[L_jij],SelPeriodIndic$Growth[L_jij])
}
# there are some variables with infinity (coming from the polity circle), I would group those
XxZzYyPeriod5BestFigureXxZzYy <- ifelse(length(which(SelPeriodIndic$Growth==Inf))>0,"Infinite",abs(round(max(SelPeriodIndic$Growth),2))) # just get the number here (in its absolute)
XxZzYyPeriod5BestCharacterizationXxZzYy <- ifelse(length(which(SelPeriodIndic$Growth==Inf))>0,"Progressed",ifelse(round(max(SelPeriodIndic$Growth))>0,"Progressed",ifelse(XxZzYyPeriod5BestFigureXxZzYy==0,"Stagnated","Regressed"))) # Progressed/Stagnated/Regressed
XxZzYyPeriod5BestXxZzYy <- ifelse(length(which(SelPeriodIndic$Growth==Inf))>0,
paste(IndicPriorityList$ShortName[which(IndicPriorityList$IndicatorsList %in% SelPeriodIndic$Indicator[which(SelPeriodIndic$Growth==Inf)])],
collapse = paste("</span><br><span class=\"badge\" data-toggle=\"tooltip\" title=\"",XxZzYyPeriod5BestCharacterizationXxZzYy," ",XxZzYyPeriod5BestFigureXxZzYy,"%\">",sep="")),
IndicPriorityList$ShortName[which(IndicPriorityList$IndicatorsList==SelPeriodIndic$Indicator[which.max(SelPeriodIndic$Growth)])]) # the name of the indicator
XxZzYyPeriod5WorstFigureXxZzYy <- ifelse(length(which(SelPeriodIndic$Growth==-Inf))>0,"Minus Infinity",abs(round(min(SelPeriodIndic$Growth),2))) # just get the number here (in its absolute)
XxZzYyPeriod5WorstCharacterizationXxZzYy <- ifelse(length(which(SelPeriodIndic$Growth==-Inf))>0,"Collapsed",ifelse(round(min(SelPeriodIndic$Growth),2)>0,"Progressed",ifelse(XxZzYyPeriod5WorstFigureXxZzYy==0,"Stagnated","Regressed"))) # Progressed/Stagnated/Regressed
XxZzYyPeriod5WorstXxZzYy <- ifelse(length(which(SelPeriodIndic$Growth==-Inf))>0,
paste(IndicPriorityList$ShortName[which(IndicPriorityList$IndicatorsList %in% SelPeriodIndic$Indicator[which(SelPeriodIndic$Growth==-Inf)])],
collapse = paste("</span><br><span class=\"badge\" data-toggle=\"tooltip\" title=\"",XxZzYyPeriod5WorstCharacterizationXxZzYy," ",XxZzYyPeriod5WorstFigureXxZzYy,"%\">")),
IndicPriorityList$ShortName[which(IndicPriorityList$IndicatorsList==SelPeriodIndic$Indicator[which.min(SelPeriodIndic$Growth)])]) # the name of the indicator
} else {
XxZzYyPeriod5BestCharacterizationXxZzYy <- paste("Only ", AvailIndicForPeriod,
" available indicators with enough observations in this period",sep = "") # Progressed/Stagnated/Regressed
XxZzYyPeriod5BestFigureXxZzYy <- "N/A" # just get the number here (in its absolute)
XxZzYyPeriod5BestXxZzYy <- "N/A" # the name of the indicator
XxZzYyPeriod5WorstCharacterizationXxZzYy <- paste("Only ", AvailIndicForPeriod,
" available indicators with enough observations in this period",sep = "")
XxZzYyPeriod5WorstFigureXxZzYy <- "N/A"
XxZzYyPeriod5WorstXxZzYy <- "N/A"
if (AvailIndicForPeriod == 0){
XxZzYyPeriod5BestCharacterizationXxZzYy <- paste("No available indicators with enough observations in this period",sep = "") # Progressed/Stagnated/Regressed
XxZzYyPeriod5WorstCharacterizationXxZzYy <- paste("No available indicators with enough observations in this period",sep = "")
}
}
if ( nrow(SelPeriodIndic) >= 2) {
XxZzYyPeriod5BestRankFigureXxZzYy <- min(RankingIndic$Rank[which(RankingIndic$`country name`==CountryList[i])])
XxZzYyPeriod5BestRankXxZzYy <- paste(IndicPriorityList$ShortName[which(IndicPriorityList$IndicatorsList %in% RankingIndic$Indicator[which(RankingIndic$`country name`==CountryList[i] & RankingIndic$Rank==XxZzYyPeriod5BestRankFigureXxZzYy)])], collapse = "</span><br><span class=\"badge\" data-toggle=\"tooltip\" title=\"Equally ranked to previous indicator\">")
XxZzYyPeriod5TotalBestRankedXxZzYy <- max(RankingIndic$Rank[which(RankingIndic$Indicator==RankingIndic$Indicator[which(RankingIndic$`country name`==CountryList[i] & RankingIndic$Rank==XxZzYyPeriod5BestRankFigureXxZzYy)][1])],na.rm = T)
XxZzYyPeriod5WorstRankFigureXxZzYy <- max(RankingIndic$Rank[which(RankingIndic$`country name`==CountryList[i])])
XxZzYyPeriod5WorstRankXxZzYy <- paste(IndicPriorityList$ShortName[which(IndicPriorityList$IndicatorsList %in% RankingIndic$Indicator[which(RankingIndic$`country name`==CountryList[i] & RankingIndic$Rank==XxZzYyPeriod5WorstRankFigureXxZzYy)])], collapse = "</span><br><span class=\"badge\" data-toggle=\"tooltip\" title=\"Equally ranked to previous indicator\">")
XxZzYyPeriod5TotalWorstRankedXxZzYy <- max(RankingIndic$Rank[which(RankingIndic$Indicator==RankingIndic$Indicator[which(RankingIndic$`country name`==CountryList[i] & RankingIndic$Rank==XxZzYyPeriod5WorstRankFigureXxZzYy)][1])],na.rm = T)
} else {
XxZzYyPeriod5BestRankFigureXxZzYy <- "N/A"
XxZzYyPeriod5TotalBestRankedXxZzYy <- "N/A"
XxZzYyPeriod5BestRankXxZzYy <- "N/A"
XxZzYyPeriod5WorstRankFigureXxZzYy <- "N/A"
XxZzYyPeriod5TotalWorstRankedXxZzYy <- "N/A"
XxZzYyPeriod5WorstRankXxZzYy <- "N/A"
}
#### a list of webnames of indicators and the Indicator's name as it appears in the data is necessary to continue ####
# the list of web names and their corresponding Indicator Name
IndicDictionary <- read_excel('/home/michalis/PhD/Clio Infra/UPDATE 20240527/IndicPriorityList.xlsx', sheet = 3)
#### I need a full list of indicators with start year, end year and number of observations ####
Durations <- temp[c("Indicator")]
Durations$StartYear <- as.numeric(NA)
Durations$EndYear <- as.numeric(NA)
Durations$Obs <- as.numeric(NA)
for (L_jjj in 1:nrow(Durations)){
L_sds <- temp[L_jjj,9:ncol(temp)]
L_sds[,which(is.na(L_sds[1,]))] <- NULL
Durations$StartYear[L_jjj] <- names(L_sds)[1]
Durations$EndYear[L_jjj] <- names(L_sds)[ncol(L_sds)]
Durations$Obs[L_jjj] <- ncol(L_sds)
Durations$Indicator[L_jjj] <- IndicDictionary$WebName[which(IndicDictionary$Indicator==Durations$Indicator[L_jjj])]
}
# I need to convert all to web names otherwise there will be missing values:
# add the missing indicators with "-" instead of real values
# it would be really hard to remove the badge, perhaps I correct for that later
MissingIndic <- ClioMetaData$WebName[which(!(c(ClioMetaData$WebName) %in% c(Durations$Indicator)))]
if (length(MissingIndic)>0){
for (L_pop in 1:length(MissingIndic)){
TempLine <- data.frame(Indicator=MissingIndic[L_pop],
StartYear="",
EndYear="",
Obs="No Data")
Durations <- rbind(Durations,TempLine)
}
}
### Indicators list ###
# file name structure: CountryName_IndicatorName_TerritorialRef_Year1_Year2_CCODE.xlsx
CountryIndicatorFilename <-
paste0(trimalls(gsub("[[:punct:]]", "", temp$`country name`[1])),
"_XXXNameOfIndicatorXXX_TerritorialRef_",temp$`start year`[1],"_",temp$`end year`[1],
"_CCode_",temp$ccode[1],".xlsx")
XxZzYyAgricultureXxZzYy <- f_IndicatorMenu("Agriculture",ClioMetaData,Durations,
XxZzYyISO3XxZzYy,CountryIndicatorFilename)
XxZzYyDemographyXxZzYy <- f_IndicatorMenu("Demography",ClioMetaData,Durations,
XxZzYyISO3XxZzYy,CountryIndicatorFilename)
XxZzYyEnvironmentXxZzYy <- f_IndicatorMenu("Environment",ClioMetaData,Durations,
XxZzYyISO3XxZzYy,CountryIndicatorFilename)
XxZzYyFinanceXxZzYy <- f_IndicatorMenu("Finance",ClioMetaData,Durations,
XxZzYyISO3XxZzYy,CountryIndicatorFilename)
XxZzYyGenderEqualityXxZzYy <- f_IndicatorMenu("Gender Equality",ClioMetaData,Durations,
XxZzYyISO3XxZzYy,CountryIndicatorFilename)
XxZzYyHumanCapitalXxZzYy <- f_IndicatorMenu("Human Capital",ClioMetaData,Durations,
XxZzYyISO3XxZzYy,CountryIndicatorFilename)
XxZzYyInstitutionsXxZzYy <- f_IndicatorMenu("Institutions",ClioMetaData,Durations,
XxZzYyISO3XxZzYy,CountryIndicatorFilename)
XxZzYyLabourRelationsXxZzYy <- f_IndicatorMenu("Labour Relations",ClioMetaData,Durations,
XxZzYyISO3XxZzYy,CountryIndicatorFilename)
XxZzYyNationalAccountsXxZzYy <- f_IndicatorMenu("National Accounts",ClioMetaData,Durations,
XxZzYyISO3XxZzYy,CountryIndicatorFilename)
XxZzYyPricesAndWagesXxZzYy <- f_IndicatorMenu("Prices and Wages",ClioMetaData,Durations,
XxZzYyISO3XxZzYy,CountryIndicatorFilename)
XxZzYyProductionXxZzYy <- f_IndicatorMenu("Production",ClioMetaData,Durations,
XxZzYyISO3XxZzYy,CountryIndicatorFilename)
test <- gsub("XxZzYyCountryShortXxZzYy", XxZzYyCountryShortXxZzYy, test)
test <- gsub("XxZzYyCountryFullXxZzYy", XxZzYyCountryFullXxZzYy, test)
test <- gsub("XxZzYyCountryShortNoSpaceXxZzYy", XxZzYyCountryShortNoSpaceXxZzYy, test)
test <- gsub("XxZzYyISO3XxZzYy", XxZzYyISO3XxZzYy, test)
test <- gsub("XxZzYyBorderPeriodsXxZzYy", XxZzYyBorderPeriodsXxZzYy, test)
test <- gsub("XxZzYyISO3numericXxZzYy", XxZzYyISO3numericXxZzYy, test)
test <- gsub("XxZzYyFoundationDateXxZzYy", XxZzYyFoundationDateXxZzYy, test)
test <- gsub("XxZzYyRegionUNXxZzYy", XxZzYyRegionUNXxZzYy, test)
test <- gsub("XxZzYyRegionOECDXxZzYy", XxZzYyRegionOECDXxZzYy, test)
test <- gsub("XxZzYyEarliestRankingDateXxZzYy", XxZzYyEarliestRankingDateXxZzYy, test)
test <- gsub("XxZzYyEarliestRankNumCountriesXxZzYy", XxZzYyEarliestRankNumCountriesXxZzYy, test)
test <- gsub("XxZzYyEarliestRankXxZzYy", XxZzYyEarliestRankXxZzYy, test)
test <- gsub("XxZzYyLatestRankingDateXxZzYy", XxZzYyLatestRankingDateXxZzYy, test)
test <- gsub("XxZzYyLatestRankNumCountriesXxZzYy", XxZzYyLatestRankNumCountriesXxZzYy, test)
test <- gsub("XxZzYyLatestRankXxZzYy", XxZzYyLatestRankXxZzYy, test)
test <- gsub("XxZzYyPeriod1CountXxZzYy", XxZzYyPeriod1CountXxZzYy, test)
test <- gsub("XxZzYyPeriod2CountXxZzYy", XxZzYyPeriod2CountXxZzYy, test)
test <- gsub("XxZzYyPeriod3CountXxZzYy", XxZzYyPeriod3CountXxZzYy, test)
test <- gsub("XxZzYyPeriod4CountXxZzYy", XxZzYyPeriod4CountXxZzYy, test)
test <- gsub("XxZzYyPeriod5CountXxZzYy", XxZzYyPeriod5CountXxZzYy, test)
test <- gsub("XxZzYyPeriod1BestCharacterizationXxZzYy", XxZzYyPeriod1BestCharacterizationXxZzYy, test)
test <- gsub("XxZzYyPeriod1BestFigureXxZzYy", XxZzYyPeriod1BestFigureXxZzYy, test)
test <- gsub("XxZzYyPeriod1BestXxZzYy", XxZzYyPeriod1BestXxZzYy, test)
test <- gsub("XxZzYyPeriod1WorstCharacterizationXxZzYy", XxZzYyPeriod1WorstCharacterizationXxZzYy, test)
test <- gsub("XxZzYyPeriod1WorstFigureXxZzYy", XxZzYyPeriod1WorstFigureXxZzYy, test)
test <- gsub("XxZzYyPeriod1WorstXxZzYy", XxZzYyPeriod1WorstXxZzYy, test)
test <- gsub("XxZzYyPeriod1BestRankFigureXxZzYy", XxZzYyPeriod1BestRankFigureXxZzYy, test)
test <- gsub("XxZzYyPeriod1TotalBestRankedXxZzYy", XxZzYyPeriod1TotalBestRankedXxZzYy, test)
test <- gsub("XxZzYyPeriod1TotalWorstRankedXxZzYy", XxZzYyPeriod1TotalWorstRankedXxZzYy, test)
test <- gsub("XxZzYyPeriod1BestRankXxZzYy", XxZzYyPeriod1BestRankXxZzYy, test)
test <- gsub("XxZzYyPeriod1WorstRankFigureXxZzYy", XxZzYyPeriod1WorstRankFigureXxZzYy, test)
test <- gsub("XxZzYyPeriod1WorstRankXxZzYy", XxZzYyPeriod1WorstRankXxZzYy, test)
test <- gsub("XxZzYyPeriod2BestCharacterizationXxZzYy", XxZzYyPeriod2BestCharacterizationXxZzYy, test)
test <- gsub("XxZzYyPeriod2BestFigureXxZzYy", XxZzYyPeriod2BestFigureXxZzYy, test)
test <- gsub("XxZzYyPeriod2BestXxZzYy", XxZzYyPeriod2BestXxZzYy, test)
test <- gsub("XxZzYyPeriod2WorstCharacterizationXxZzYy", XxZzYyPeriod2WorstCharacterizationXxZzYy, test)
test <- gsub("XxZzYyPeriod2WorstFigureXxZzYy", XxZzYyPeriod2WorstFigureXxZzYy, test)
test <- gsub("XxZzYyPeriod2WorstXxZzYy", XxZzYyPeriod2WorstXxZzYy, test)
test <- gsub("XxZzYyPeriod2BestRankFigureXxZzYy", XxZzYyPeriod2BestRankFigureXxZzYy, test)
test <- gsub("XxZzYyPeriod2TotalBestRankedXxZzYy", XxZzYyPeriod2TotalBestRankedXxZzYy, test)
test <- gsub("XxZzYyPeriod2TotalWorstRankedXxZzYy", XxZzYyPeriod2TotalWorstRankedXxZzYy, test)
test <- gsub("XxZzYyPeriod2BestRankXxZzYy", XxZzYyPeriod2BestRankXxZzYy, test)
test <- gsub("XxZzYyPeriod2WorstRankFigureXxZzYy", XxZzYyPeriod2WorstRankFigureXxZzYy, test)
test <- gsub("XxZzYyPeriod2WorstRankXxZzYy", XxZzYyPeriod2WorstRankXxZzYy, test)
test <- gsub("XxZzYyPeriod3BestCharacterizationXxZzYy", XxZzYyPeriod3BestCharacterizationXxZzYy, test)
test <- gsub("XxZzYyPeriod3BestFigureXxZzYy", XxZzYyPeriod3BestFigureXxZzYy, test)
test <- gsub("XxZzYyPeriod3BestXxZzYy", XxZzYyPeriod3BestXxZzYy, test)
test <- gsub("XxZzYyPeriod3WorstCharacterizationXxZzYy", XxZzYyPeriod3WorstCharacterizationXxZzYy, test)
test <- gsub("XxZzYyPeriod3WorstFigureXxZzYy", XxZzYyPeriod3WorstFigureXxZzYy, test)
test <- gsub("XxZzYyPeriod3WorstXxZzYy", XxZzYyPeriod3WorstXxZzYy, test)
test <- gsub("XxZzYyPeriod3BestRankFigureXxZzYy", XxZzYyPeriod3BestRankFigureXxZzYy, test)
test <- gsub("XxZzYyPeriod3TotalBestRankedXxZzYy", XxZzYyPeriod3TotalBestRankedXxZzYy, test)
test <- gsub("XxZzYyPeriod3TotalWorstRankedXxZzYy", XxZzYyPeriod3TotalWorstRankedXxZzYy, test)
test <- gsub("XxZzYyPeriod3BestRankXxZzYy", XxZzYyPeriod3BestRankXxZzYy, test)
test <- gsub("XxZzYyPeriod3WorstRankFigureXxZzYy", XxZzYyPeriod3WorstRankFigureXxZzYy, test)
test <- gsub("XxZzYyPeriod3WorstRankXxZzYy", XxZzYyPeriod3WorstRankXxZzYy, test)
test <- gsub("XxZzYyPeriod4BestCharacterizationXxZzYy", XxZzYyPeriod4BestCharacterizationXxZzYy, test)
test <- gsub("XxZzYyPeriod4BestFigureXxZzYy", XxZzYyPeriod4BestFigureXxZzYy, test)
test <- gsub("XxZzYyPeriod4BestXxZzYy", XxZzYyPeriod4BestXxZzYy, test)
test <- gsub("XxZzYyPeriod4WorstCharacterizationXxZzYy", XxZzYyPeriod4WorstCharacterizationXxZzYy, test)
test <- gsub("XxZzYyPeriod4WorstFigureXxZzYy", XxZzYyPeriod4WorstFigureXxZzYy, test)
test <- gsub("XxZzYyPeriod4WorstXxZzYy", XxZzYyPeriod4WorstXxZzYy, test)
test <- gsub("XxZzYyPeriod4BestRankFigureXxZzYy", XxZzYyPeriod4BestRankFigureXxZzYy, test)
test <- gsub("XxZzYyPeriod4TotalBestRankedXxZzYy", XxZzYyPeriod4TotalBestRankedXxZzYy, test)
test <- gsub("XxZzYyPeriod4TotalWorstRankedXxZzYy", XxZzYyPeriod4TotalWorstRankedXxZzYy, test)
test <- gsub("XxZzYyPeriod4BestRankXxZzYy", XxZzYyPeriod4BestRankXxZzYy, test)
test <- gsub("XxZzYyPeriod4WorstRankFigureXxZzYy", XxZzYyPeriod4WorstRankFigureXxZzYy, test)
test <- gsub("XxZzYyPeriod4WorstRankXxZzYy", XxZzYyPeriod4WorstRankXxZzYy, test)
test <- gsub("XxZzYyPeriod5BestCharacterizationXxZzYy", XxZzYyPeriod5BestCharacterizationXxZzYy, test)
test <- gsub("XxZzYyPeriod5BestFigureXxZzYy", XxZzYyPeriod5BestFigureXxZzYy, test)
test <- gsub("XxZzYyPeriod5BestXxZzYy", XxZzYyPeriod5BestXxZzYy, test)
test <- gsub("XxZzYyPeriod5WorstCharacterizationXxZzYy", XxZzYyPeriod5WorstCharacterizationXxZzYy, test)
test <- gsub("XxZzYyPeriod5WorstFigureXxZzYy", XxZzYyPeriod5WorstFigureXxZzYy, test)
test <- gsub("XxZzYyPeriod5WorstXxZzYy", XxZzYyPeriod5WorstXxZzYy, test)
test <- gsub("XxZzYyPeriod5BestRankFigureXxZzYy", XxZzYyPeriod5BestRankFigureXxZzYy, test)
test <- gsub("XxZzYyPeriod5TotalBestRankedXxZzYy", XxZzYyPeriod5TotalBestRankedXxZzYy, test)
test <- gsub("XxZzYyPeriod5TotalWorstRankedXxZzYy", XxZzYyPeriod5TotalWorstRankedXxZzYy, test)
test <- gsub("XxZzYyPeriod5BestRankXxZzYy", XxZzYyPeriod5BestRankXxZzYy, test)
test <- gsub("XxZzYyPeriod5WorstRankFigureXxZzYy", XxZzYyPeriod5WorstRankFigureXxZzYy, test)
test <- gsub("XxZzYyPeriod5WorstRankXxZzYy", XxZzYyPeriod5WorstRankXxZzYy, test)
#test <- gsub("XxZzYyAnyPeriodsBestCharacterizationXxZzYy", XxZzYyAnyPeriodsBestCharacterizationXxZzYy, test)
#test <- gsub("XxZzYyAnyPeriodsBestFigureXxZzYy", XxZzYyAnyPeriodsBestFigureXxZzYy, test)
#test <- gsub("XxZzYyAnyPeriodsBestYearXxZzYy", XxZzYyAnyPeriodsBestYearXxZzYy, test)
#test <- gsub("XxZzYyAnyPeriodsBestXxZzYy", XxZzYyAnyPeriodsBestXxZzYy, test)
#test <- gsub("XxZzYyAnyPeriodsWorstCharacterizationXxZzYy", XxZzYyAnyPeriodsWorstCharacterizationXxZzYy, test)
#test <- gsub("XxZzYyAnyPeriodsWorstFigureXxZzYy", XxZzYyAnyPeriodsWorstFigureXxZzYy, test)
#test <- gsub("XxZzYyAnyPeriodsWorstYearXxZzYy", XxZzYyAnyPeriodsWorstYearXxZzYy, test)
#test <- gsub("XxZzYyAnyPeriodsWorstXxZzYy", XxZzYyAnyPeriodsWorstXxZzYy, test)
#test <- gsub("XxZzYyAnyPeriodsBestRankFigureXxZzYy", XxZzYyAnyPeriodsBestRankFigureXxZzYy, test)
#test <- gsub("XxZzYyAnyPeriodsTotalBestRankedXxZzYy", XxZzYyAnyPeriodsTotalBestRankedXxZzYy, test)
#test <- gsub("XxZzYyAnyPeriodsTotalWorstRankedXxZzYy", XxZzYyAnyPeriodsTotalWorstRankedXxZzYy, test)
#test <- gsub("XxZzYyAnyPeriodsBestRankYearXxZzYy", XxZzYyAnyPeriodsBestRankYearXxZzYy, test)
#test <- gsub("XxZzYyAnyPeriodsBestRankXxZzYy", XxZzYyAnyPeriodsBestRankXxZzYy, test)
#test <- gsub("XxZzYyAnyPeriodsWorstRankFigureXxZzYy", XxZzYyAnyPeriodsWorstRankFigureXxZzYy, test)
#test <- gsub("XxZzYyAnyPeriodsWorstRankYearXxZzYy", XxZzYyAnyPeriodsWorstRankYearXxZzYy, test)
#test <- gsub("XxZzYyAnyPeriodsWorstRankXxZzYy", XxZzYyAnyPeriodsWorstRankXxZzYy, test)
# Indicators
test <- gsub("XxZzYyAgricultureXxZzYy", XxZzYyAgricultureXxZzYy, test)
test <- gsub("XxZzYyDemographyXxZzYy", XxZzYyDemographyXxZzYy, test)
test <- gsub("XxZzYyEnvironmentXxZzYy", XxZzYyEnvironmentXxZzYy, test)
test <- gsub("XxZzYyFinanceXxZzYy", XxZzYyFinanceXxZzYy, test)
test <- gsub("XxZzYyGenderEqualityXxZzYy", XxZzYyGenderEqualityXxZzYy, test)
test <- gsub("XxZzYyHumanCapitalXxZzYy", XxZzYyHumanCapitalXxZzYy, test)
test <- gsub("XxZzYyInstitutionsXxZzYy", XxZzYyInstitutionsXxZzYy, test)
test <- gsub("XxZzYyLabourRelationsXxZzYy", XxZzYyLabourRelationsXxZzYy, test)
test <- gsub("XxZzYyNationalAccountsXxZzYy", XxZzYyNationalAccountsXxZzYy, test)
test <- gsub("XxZzYyPricesAndWagesXxZzYy", XxZzYyPricesAndWagesXxZzYy, test)
test <- gsub("XxZzYyProductionXxZzYy", XxZzYyProductionXxZzYy, test)
# Header data
#test <- gsub("XxZzYyTotalDatasetsXxZzYy", XxZzYyTotalDatasetsXxZzYy, test)
#test <- gsub("XxZzYyTotalNumOfCountriesXxZzYy", XxZzYyTotalNumOfCountriesXxZzYy, test)
# About Clio Infra
#test <- gsub("XxZzYyAboutClioInfraXxZzYy", XxZzYyAboutClioInfraXxZzYy, test)
### Now exporting indicator and country files
# Now I want to export separate xls files for each country and indicator combination available
# get the list of indicators for the current country
ForExport <- unique(temp$Indicator)
# make a copy to later contain the Web Names
ForExportNames <- ForExport
# get the web names for the copy
for (L_jjj in 1:length(ForExport)){
ForExportNames[L_jjj] <-
IndicPriorityList$WebName[which(IndicPriorityList$IndicatorsList==ForExportNames[L_jjj])]
}
# loop through the data for this country and save each file
if (ExportData){
for (L_ij in 1:length(ForExport)){
dataframe1 <- subset(temp,temp$Indicator==ForExport[L_ij])
# file name structure: CountryName_IndicatorName_TerritorialRef_Year1_Year2_CCODE.xlsx
CountryIndicatorFilename <-
paste0(trimalls(gsub("[[:punct:]]", "", dataframe1$`country name`)),
"_",trimalls(gsub("[[:punct:]]", "", ForExportNames[L_ij])),
"_TerritorialRef_",dataframe1$`start year`,"_",dataframe1$`end year`,
"_CCode_",dataframe1$ccode,".xlsx")
CountryIndicatorFilenamePath <-
paste0(GenericPath,"/IndicatorsPerCountry/",CountryIndicatorFilename)
dataframe1$`Webmapper code`<- NULL
dataframe1$`Webmapper numeric code` <- NULL
dataframe1$`start year` <- NULL
dataframe1$`end year` <- NULL
dataframe1$Filename <- NULL
StartYears <- c(Durations$StartYear[which(Durations$Indicator==ForExportNames[L_ij])])
EndYears <- c(Durations$EndYear[which(Durations$Indicator==ForExportNames[L_ij])])
LocalYears <- seq(as.numeric(StartYears),as.numeric(EndYears),1)
dataframe1b <- expand.grid(dataframe1$`ccode`[1],dataframe1$`country name`[1],
dataframe1$Indicator[1],LocalYears, stringsAsFactors = F,KEEP.OUT.ATTRS = F)
names(dataframe1b) <- c("Country Code", "Country Name", "Indicator", "Year")
dataframe1b$Data <-
t(dataframe1[,which(names(dataframe1)==dataframe1b$Year[1]):
which(names(dataframe1)==dataframe1b$Year[length(dataframe1b$Year)])])
write.xlsx2(dataframe1b, file=CountryIndicatorFilenamePath, sheetName="Data", row.names=F, showNA=F)
Metadata <- t(c("Downloaded from",paste0(URL_basis,"/IndicatorsPerCountry/",CountryIndicatorFilename)))
Metadata <- as.data.frame(Metadata, stringsAsFactors=F)
names(Metadata) <- c("Description","Value")
FullMetadata <- Metadata
CitationFileName <- Citations$CitationFilenamePrefix[which(Citations$Indicator==ForExport[L_ij])]
CitationFileName <- as.character(CitationFileName)
bib <- ReadBib(paste0(GenericPath,"/Citations/",CitationFileName,".bib"))[1]
TheAuthorAndDate <- capture.output(print(bib, .opts = list(bib.style = "authoryear", first.inits = FALSE, no.print.fields = c("title","publisher","url"))))
xxxTemp <- unlist(bib)
Metadata <- t(c("Text Citation",paste(TheAuthorAndDate," ",xxxTemp$title,". ", xxxTemp$url,", accessed via the Clio Infra website.", sep = "")))
Metadata <- as.data.frame(Metadata, stringsAsFactors=F)
names(Metadata) <- c("Description","Value")
FullMetadata <- rbind(FullMetadata,Metadata)
CitationFileName <- Citations$CitationFilenamePrefix[which(Citations$Indicator==ForExport[L_ij])]
Metadata <- t(c("XML Citation",paste0(URL_basis,"/Citations/",CitationFileName,".xml")))
Metadata <- as.data.frame(Metadata, stringsAsFactors=F)
names(Metadata) <- c("Description","Value")
FullMetadata <- rbind(FullMetadata,Metadata)
Metadata <- t(c("RIS Citation",paste0(URL_basis,"/Citations/",CitationFileName,".ris")))
Metadata <- as.data.frame(Metadata, stringsAsFactors=F)
names(Metadata) <- c("Description","Value")
FullMetadata <- rbind(FullMetadata,Metadata)
Metadata <- t(c("BIB Citation",paste0(URL_basis,"/Citations/",CitationFileName,".bib")))
Metadata <- as.data.frame(Metadata, stringsAsFactors=F)
names(Metadata) <- c("Description","Value")
FullMetadata <- rbind(FullMetadata,Metadata)
write.xlsx2(FullMetadata, file=CountryIndicatorFilenamePath, sheetName="Metadata", append=TRUE, row.names=F)
} # export individual datasets loop
# now export all available data for the country:
# with four metadata: download location, ris citations, bib citations and xml citations
} # only run if ExportData is true
CountryIndicatorFilename <-
paste0(trimalls(gsub("[[:punct:]]", "", temp$`country name`[1])),"_AllIndicatorsAvailable",
"_TerritorialRef_",temp$`start year`[1],"_",temp$`end year`[1],
"_CCode_",temp$ccode[1],".xlsx")
CountryIndicatorFilenamePath <-
paste0(GenericPath,"/CountryData/",CountryIndicatorFilename)
tempDurations <- Durations
tempDurations$CountryName <- temp$`country name`[1]
tempDurations$CCode <- temp$ccode[1]
tempDurations$ISO3 <- XxZzYyISO3XxZzYy
tempDurations$CountryFileName <- CountryIndicatorFilename
if (exists("GlobalDurations")){
GlobalDurations <- rbind(GlobalDurations,tempDurations)
} else {
GlobalDurations <- tempDurations
}
rm(tempDurations)
test <- gsub("XxZzYyCountryIndicatorFilenameXxZzYy", CountryIndicatorFilename, test)
LocalTemp <- temp
LocalTemp$`Webmapper code`<- NULL
LocalTemp$`Webmapper numeric code` <- NULL
LocalTemp$`start year` <- NULL
LocalTemp$`end year` <- NULL
LocalTemp$Filename <- NULL
names(LocalTemp)[1:3] <- c("Country Code", "Country Name", "Indicator")
# order them alphabetically
LocalTemp <- LocalTemp[ order(LocalTemp$Indicator), ]
fLocalTemp <- LocalTemp
fLocalTemp$`Country Code` <- factor(fLocalTemp$`Country Code`)
fLocalTemp$`Country Name` <- factor(fLocalTemp$`Country Name`)
fLocalTemp$Indicator <- factor(fLocalTemp$Indicator)
LocalTempLongFormat <- gather(fLocalTemp,year,value,which(names(fLocalTemp)=="1500"):which(names(fLocalTemp)=="2015"))
LocalTempLongFormat <- LocalTempLongFormat[!is.na(LocalTempLongFormat$value),]
if (ExportCountryData){
ttt <- as.data.frame(as.matrix(LocalTemp),stringsAsFactors = F)
ttt[,c(1,seq(4,ncol(ttt),1))] <-  lapply(ttt[,c(1,seq(4,ncol(ttt),1))], function (x) as.numeric(x))
write.xlsx2(ttt, file=CountryIndicatorFilenamePath, sheetName="Data Clio Infra Format", row.names=F, showNA=F)
rm(ttt)
ttt <- as.data.frame(as.matrix(LocalTempLongFormat),stringsAsFactors = F)
ttt[,c(1,seq(4,ncol(ttt),1))] <-  lapply(ttt[,c(1,seq(4,ncol(ttt),1))], function (x) as.numeric(x))
write.xlsx2(ttt, file=CountryIndicatorFilenamePath, sheetName="Data Long Format", append=TRUE,
row.names=F, showNA=F)
rm(ttt)
# fetch the download location:
Metadata <- t(c("Downloaded from",paste0(URL_basis,"/CountryData/",CountryIndicatorFilename)))
Metadata <- as.data.frame(Metadata)
names(Metadata) <- c("Description","Value")
write.xlsx2(Metadata, file=CountryIndicatorFilenamePath, sheetName="URL", append=TRUE, row.names=F)
# now get the citations for all the data:
CitationFileName <- Citations$CitationFilenamePrefix[which(Citations$Indicator %in% unique(LocalTemp$Indicator))]
CitationIndicators <- Citations$Indicator[which(Citations$Indicator %in% unique(LocalTemp$Indicator))]
# first place the text based:
FullMetadata <- NULL
for (i_bib in 1:length(CitationFileName)){
bib <- ReadBib(paste0(GenericPath,"/Citations/",CitationFileName,".bib")[i_bib])[1]
TheAuthorAndDate <- capture.output(print(bib, .opts = list(bib.style = "authoryear", first.inits = FALSE, no.print.fields = c("title","publisher","url"))))
xxxTemp <- unlist(bib)
Metadata <- t(c("Text Citation",paste(TheAuthorAndDate," ",xxxTemp$title,". ", xxxTemp$url,", accessed via the Clio Infra website.", sep = "")))
Metadata <- as.data.frame(Metadata, stringsAsFactors=F)
names(Metadata) <- c("Description","Value")
FullMetadata <- rbind(FullMetadata,Metadata)
}
write.xlsx(FullMetadata, file=CountryIndicatorFilenamePath, sheetName="Text Citations", append=TRUE, row.names=F)
Metadata <- c(paste0(URL_basis,"/Citations/",CitationFileName,".xml"))
Metadata <- as.data.frame(Metadata)
names(Metadata) <- c("Value")
Metadata$Description <- CitationIndicators
Metadata <- Metadata[,c(2,1)]
Metadata <- Metadata[ order(Metadata[,1]),]
write.xlsx2(Metadata, file=CountryIndicatorFilenamePath, sheetName="XML Citations", append=TRUE, row.names=F)
Metadata <- c(paste0(URL_basis,"/Citations/",CitationFileName,".ris"))
Metadata <- as.data.frame(Metadata)
names(Metadata) <- c("Value")
Metadata$Description <- CitationIndicators
Metadata <- Metadata[,c(2,1)]
Metadata <- Metadata[ order(Metadata[,1]),]
write.xlsx2(Metadata, file=CountryIndicatorFilenamePath, sheetName="RIS Citations", append=TRUE, row.names=F)
Metadata <- c(paste0(URL_basis,"/Citations/",CitationFileName,".bib"))
Metadata <- as.data.frame(Metadata)
names(Metadata) <- c("Value")
Metadata$Description <- CitationIndicators
Metadata <- Metadata[,c(2,1)]
Metadata <- Metadata[ order(Metadata[,1]),]
write.xlsx2(Metadata, file=CountryIndicatorFilenamePath, sheetName="BIB Citations", append=TRUE, row.names=F)
}# end of exporting the available data and metadata for a given country
# export the HTML page:
write(test, countryHTMLfile)
print(paste("Exported page for: ",CountryList[i], sep=""))
rm(test)
rm(list=ls(pattern="^XxZzYy"))
} else {
#if (nrow(temp)>0)
print(paste("Only : ",nrow(temp)," variables for ",CountryList[i], sep=""))
}
}# if (GlobalMetadata$DataPoints[which(GlobalMetadata$ClioInfraCountryName==CountryList[i])]>0)
}
} # if for the create the page or not in case it already exists
} # outer for loop
